<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
        声明，注册SpringMVC的核心对象DispatcherServlet需要在Tomcat服务器启动之后，创建DispatcherServlet对象的实例。
        为什么要创建DispatcherServlet对象的实例呢？
            因为DispatcherServlet在他的创建过程中，会同时创建SpringMVC容器对象，读取SpringMVC的配置文件，把这个配置文件中的
            对象都创建好，当用户发起请求时就可以直接使用对象了。

        servlet的初始化会执行init()方法。DispatcherServlet在init()中{
            // 创建容器，读取配置文件
            WebApplicationContext context = new ClassPathXMLApplicationContext("springmvc.xml");
            // 把容器对象放入到ServletContext中
            getServletContext.setAttribute(key, context);
        }
     -->
    <servlet>
        <servlet-name>myWeb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 自定义SpringMVC读取的配置文件的位置 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--
            在Tomcat启动后，创建Servlet对象
                load-on-startup：表示Tomcat启动后创建对象的顺序。他的值是整数，数值越小，Tomcat创建对象的时间就越早。是一个大于等于0的整数。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myWeb</servlet-name>
        <!--
            使用框架的时候，url-pattern可以使用两种值
            1、使用扩展名方式，语法：*.xxx, xxx是自定义的扩展名。常用的方式 *.do, *.action, *.mvc等等
            2、使用斜杠："/"
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

</web-app>