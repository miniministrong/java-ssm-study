<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 将我们的properties配置文件加载到spring配置文件中去 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 设置dataSource连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!-- 创建SQLSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!-- 创建dao对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="study.ssm.spring.transaction.dao"/>
    </bean>

    <!-- 定义声明的service -->
    <bean id="goodsService" class="study.ssm.spring.transaction.service.impl.GoodsServiceImpl">
        <property name="goodsDAO" ref="goodsDAO"/>
        <property name="saleDAO" ref="saleDAO"/>
    </bean>

    <!-- 设置spring事务 -->
    <!-- 开启spring事务管理器 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>-->
    <!-- 将事务管理交给spring -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->


    <!-- 大型项目配置方式 -->
    <!-- 声明事务处理：和源代码完全分离 -->
    <!-- 1. 声明事务管理器对象 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--
        2. 声明业务方法的事务属性，（隔离级别，传播行为，超时时间）
            id:自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容的
            transaction-manager:事务管理器的id
    -->
    <tx:advice id="interceptor" transaction-manager="transactionManager">
        <!-- tx:attributes：配置事务属性 -->
        <tx:attributes>
            <!--
                tx:method：给具体的方法配置事务属性，method可以有很多个，分别给不同的方法设置事务属性
                    name：方法名称
                        1）完整的方法名称，不带有包和类
                        2）方法可以使用通配符，*表示任意字符
                    propagation：传播行为。枚举值
                    isolation：隔离级别
                    rollback-for：你指定的异常类名，全限定名称。发生异常时一定回滚
            -->
            <tx:method name="updateGoods" propagation="REQUIRED" isolation="DEFAULT" read-only="false"
                rollback-for="java.lang.NullPointerException, study.ssm.spring.transaction.exception.NotEnoughException"/>
            <!-- 使用通配符，指定很多方法 -->
            <tx:method name="add*" propagation="REQUIRES_NEW"/>
            <!-- 指定修改方法 -->
            <tx:method name="modify*"/>
            <!-- 指定删除方法 -->
            <tx:method name="remove*"/>
            <!-- 指定查询方法，query，find，search -->
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 3. 配置aop -->
    <aop:config>
        <!--
            配置切入点表达式：指定哪些包中的类，要使用事务
                id：切入点表达式的名称，唯一值
                expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        <!--
            配置增强器：关联advice和pointcut
                advice-ref：通知，上面的tx:advice中的配置
                pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="interceptor" pointcut-ref="servicePt"/>
    </aop:config>
</beans>